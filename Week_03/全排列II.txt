½â·¨1 :

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
       List<List<Integer>> resource = new ArrayList();
       Arrays.sort(nums);
       int len = nums.length;

       if (len == 0) {
           return resource;
       }

       boolean[] is_used = new boolean[len];
       Deque<Integer> path = new ArrayDeque<Integer>(len);
       dfs(resource, 0, path, is_used, nums, len);
       return resource;
    }

    public void dfs(List<List<Integer>> resource, int depth, Deque<Integer> path, boolean[] is_used,
    int[] nums, int length) {
        if (depth == length) {
            resource.add(new ArrayList(path));
            return;
        }

        for (int i = 0; i < length; i++) {
            if (is_used[i] == true) {
                continue;
            }

            if (i > 0 && nums[i] == nums[i - 1] && !is_used[i - 1]) {
                continue;
            }

            is_used[i] = true;
            path.addLast(nums[i]);

            dfs(resource, depth + 1, path, is_used, nums, length);

            path.removeLast();
            is_used[i] = false;
        }
    }
}