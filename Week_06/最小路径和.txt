解法1:

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        if (m == 0) return 0;

        int n = grid[0].length;
        int[][] dp = new int[m][n];

        dp[0][0] = grid[0][0];
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i - 1][0] + grid[i][0];
        }

        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j - 1] + grid[0][j];
        }

        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }
        
        return dp[m - 1][n - 1];
    }
}

解法2:

class Solution {
    public int rob(int[] nums) {
        int first = 0, seconds = 0;
        int n = nums.length;
        if (nums == null || nums.length == 0) {
            return 0;
        }

        if (nums.length == 1) {
            return nums[0];
        }

        first = nums[0];
        seconds = Math.max(nums[1], nums[0]);
        for (int i = 2;i < n; i++) {
            int tmp = seconds;
            seconds = Math.max(first + nums[i], seconds);
            first = tmp;
        }

	return seconds;
    }
}