解法 1:
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> stack_node = new Stack<TreeNode>();
        TreeNode curr = null;

        stack_node.push(root);
        while (!stack_node.empty()) {
            curr = stack_node.pop();
            if (curr != null) {
                res.add(curr.val);

                if (curr.right != null) {
                    stack_node.push(curr.right);
                }

                if (curr.left != null) {
                    stack_node.push(curr.left);
                }
            }

        }

        return res;
    }
}

解法 2:

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        preTraversal(res, root);
        return res;
    }

    private void preTraversal(List<Integer> res, TreeNode root) {
        if (root != null) {
            res.add(root.val);

            if (root.left != null) {
                preTraversal(res, root.left);
            }

            if (root.right != null) {
                preTraversal(res, root.right);
            }
        }
    }
}