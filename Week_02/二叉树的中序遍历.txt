解法1 :

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        Stack<TreeNode> stack_node = new Stack<TreeNode>();
        TreeNode curr = root;
        while (curr != null || !stack_node.empty()) {
            while (curr != null) {
                stack_node.push(curr);
                curr = curr.left;
            }
            curr = stack_node.pop();
            res.add(curr.val);
            curr = curr.right;
        }
        return res;
    }

}

解法2 :

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        orderTraversal(res, root);
        return res;
    }

    private void orderTraversal(List<Integer> res, TreeNode root) {
        if (root != null) {
            if (root.left != null) {
                orderTraversal(res, root.left);
            }
            res.add(root.val);
            if (root.right != null) {
                orderTraversal(res, root.right);
            }
        }
    }

}